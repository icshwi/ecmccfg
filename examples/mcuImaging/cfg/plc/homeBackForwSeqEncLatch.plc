###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# PLC Functionality Demo:
#
#   Code Description:
#     1. Enable power on axis (mc_power())
#     2. Home at startup if needed (mc_home())
#     3. Move to position 130 (mc_move_abs())
#     4. Move to position -10 (mc_move_abs())
#     5. Stop sequence if limit switch violation or errorCode on motion blocks
#     

var errorCode:=0;

##### 0. Put all initiations here
if(plc0.firstscan){  
  println('Starting PLC motion example!!');
  #Ignore commands during startup sequence
  ax1.blockcom:=1;
  static.seqStep:=1;
  static.cycleCounter:=0;
  static.epicsDisableSeq:=0;
};

if(static.epicsDisableSeq){
  static.seqStep:=100;  #invalid
};

##### 1. Put power on axis (run mc_power())
if(static.seqStep==1)
{
  if(not(ax1.error))
  {
    errorCode=mc_power(1,1);
    if(errorCode)
    {
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else
  {
    ax1.reset:=1;
  };
  if(ax1.drv.enabled){
    static.seqStep:=2;
    println('2. Function mc_home()  triggered!');
  }
};

##### 2. Do homing sequence (run mc_home())
if(static.seqStep==2)
{
  var homingSeq:=3;
  var velTwoardsCam:=5;
  var velOffCam:=4;
  errorCode=mc_home(1,1,homingSeq,velTwoardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.enc.homed and not(mc_get_busy(1)))
  {
    static.seqStep:=3;
    println('3. Function mc_move_abs()  triggered!');
  };
};

##### 3. Trigger a absolute move 
if(static.seqStep==3){
  ec0.s2.ENC_CONTROL:=ec_clr_bit(ec0.s2.ENC_CONTROL,0);  #Set/reset latch on C  
  ax1.blockcom:=0;  #Allow EPICS control
  var posTarg:=130;
  var vel:=50;
  var acc:=100;
  var dec:=100;
  errorCode:=mc_move_abs(1,1,posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.traj.setpos==posTarg and not(mc_get_busy(1)))
  {
    mc_move_abs(1,0,posTarg,vel,acc,dec);  # Set execute low
    static.seqStep:=4;
    println('4. Function mc_move_abs(1,1,-10,100,100,100) triggered!');
  };
};

##### 4. Trigger a absolute move 
if(static.seqStep==4){
  ec0.s2.ENC_CONTROL:=ec_set_bit(ec0.s2.ENC_CONTROL,0); #Set/reset latch on C
  var posTarg:=10;
  var vel:=100;
  var acc:=100;
  var dec:=100;
  errorCode:=mc_move_abs(1,1,posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };
  if(ax1.traj.setpos==posTarg and not(mc_get_busy(1)))
  {
    mc_move_abs(1,0,posTarg,vel,acc,dec);  # Set execute low
    static.seqStep:=3;
    println('3. Function mc_move_abs(1,1,130,50,100,100) triggered!');
    static.cycleCounter:=static.cycleCounter+1;
    println('Cycles:  ',static.cycleCounter);  # See if axis 1 is busy
  };
};

##### 5. Disable power if any of the limits are engaged
if((static.seqStep>2 and (not(ax1.mon.lowlim) or not(ax1.mon.highlim))) or static.epicsDisableSeq or errorCode)
{
  errorCode=mc_power(1,0);
  if(errorCode)
  {
    println('Function mc_power() returned error: ', errorCode);
    plc0.error:=errorCode;
  };

  if(not(ax1.drv.enabled))
  {
    println('Sequence ended by limit switch violation. ErrorCode:', errorCode);
    static.seqStep:=10;      # Sequence end
    ax1.blockcom:=0;         # Allow commands again
    plc0.enable:=0;          # Disable PLC
  };
};

# print out each new valid latched value (on c-track)
if(ec_chk_bit(ec0.s2.ENC_STATUS,0) and not(static.oldLatchValid))
{
  println('New latched position: ' , ec0.s2.LATCH_POSITION);  
  ds_append(1,ec0.s2.LATCH_POSITION/10);
};

static.oldLatchValid:=ec_chk_bit(ec0.s2.ENC_STATUS,0);

return [];

println('NEVER HERE');