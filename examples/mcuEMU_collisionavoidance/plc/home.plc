###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# PLC Functionality Demo:
#
#   Code Description:
#     1. Enable power on axis (mc_power())
#     2. Home at startup if needed (mc_home())
#     3. Move to position 120 (mc_move_abs())
#     4. Move to position -10 (mc_move_abs())
#     5. Stop sequence if limit switch violation or errorCode on motion blocks
#     

var errorCode:=0;

##### 0. Put all initiations here
if(plc0.firstscan){  
  println('Starting PLC motion example!!');
  #Ignore commands during startup sequence
  ax2.blockcom:=1;
  static.seqStep:=1;
  static.cycleCounter:=0;
  static.epicsDisableSeq:=0;
};

if(static.epicsDisableSeq){
  static.seqStep:=100;  #invalid
};

##### 1. Put power on axis (run mc_power())
if(static.seqStep==1)
{
  if(not(ax2.error))
  {
    errorCode=mc_power(2,1);
    if(errorCode)
    {
      println('Function mc_power() returned error: ', errorCode);
      plc0.error:=errorCode;
    };
  }
  else
  {
    ax2.reset:=1;
  };
  if(ax2.drv.enabled){
    static.seqStep:=2;
    println('2. Function mc_home()  triggered!');
  }
};

##### 2. Do homing sequence (run mc_home())
if(static.seqStep==2)
{
  var homingSeq:=1;
  var velTwoardsCam:=1;
  var velOffCam:=1;
  errorCode=mc_home(2,1,homingSeq,velTwoardsCam,velOffCam);
  if(errorCode){
    println('Function mc_home() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  if(ax2.enc.homed and not(mc_get_busy(2)))
  {
    static.seqStep:=3;
    println('3. Function mc_move_abs()  triggered!');
  };
};

##### 3. Trigger a absolute move to reach LLS
if(static.seqStep==3){
  println('sequence 3 entered');
  ax2.blockcom:=0;  #Allow EPICS control
  var posTarg:=-10;
  var vel:=1;
  var acc:=100;
  var dec:=100;
  errorCode:=mc_move_abs(2,1,posTarg,vel,acc,dec);
  if(errorCode){
    println('Error: mc_move_abs() returned error: ',errorCode);
    plc0.error:=errorCode;
  };
 static.seqStep:=4;
};


##### 4. wait until LLS is reached
if(static.seqStep==4){
  var posTarg:=-10;
  var vel:=1;
  var acc:=100;
  var dec:=100;
 #Finish the sequence with error if the LLS is not hit before axis arrives to absolute position
  if(ax2.traj.setpos==posTarg and not(mc_get_busy(2)))
  {
  println('absolute position reached before the LLS');
  mc_move_abs(2,0,posTarg,vel,acc,dec);  # Set execute low
  println('Sequence ended because limit switch was not reached. ErrorCode:', errorCode);
    errorCode=mc_power(2,0);               # disable axis power
  if(errorCode)
  {
    println('Function mc_power() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  println('Sequence ended because limit switch was not reached. ErrorCode:', errorCode);
  static.seqStep:=10;      # Sequence end
  ax2.blockcom:=0;         # Allow commands again
  plc0.enable:=0;          # Disable PLC
  };
  if(not(ax2.mon.lowlim))
  {
  println('LLS hitted stop the plc code');
  mc_move_abs(2,0,posTarg,vel,acc,dec);  # Set execute low
  errorCode=mc_power(2,0);               # disable axis power
  if(errorCode)
  {
    println('Function mc_power() returned error: ', errorCode);
    plc0.error:=errorCode;
  };
  static.seqStep:=10;      # Sequence end
  ax2.blockcom:=0;         # Allow commands again
  plc0.enable:=0;          # Disable PLC
  println('Axis is Low Limit Switch!');
  };
};

return [];

println('NEVER HERE');
